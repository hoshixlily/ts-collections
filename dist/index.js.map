{"version":3,"file":"index.js","sources":["../src/exceptions/ArgumentNullException.ts","../src/exceptions/ArgumentOutOfRangeException.ts","../src/exceptions/ArgumentException.ts","../src/list/List.ts"],"sourcesContent":["export class ArgumentNullException extends Error {\r\n    name = \"ArgumentNullException\";\r\n    message = \"object is null.\"\r\n    public constructor(message?: string) {\r\n        super();\r\n        if (message) this.message = message;\r\n    }\r\n}","export class ArgumentOutOfRangeException extends Error {\r\n    public name: string = \"ArgumentOutOfRangeException\";\r\n    public message: string = \"arrayIndex is out of range.\";\r\n    public constructor(message: string) {\r\n        super();\r\n        this.message = message;\r\n    }\r\n}","export class ArgumentException extends Error {\r\n    public name = \"ArgumentException\";\r\n    public message = \"Invalid argument.\"\r\n    public constructor(message?: string) {\r\n        super();\r\n        if(message) {\r\n            this.message = message;\r\n        }\r\n    }\r\n}","import { IList } from \"./IList\";\r\nimport { ArgumentNullException } from \"../exceptions/ArgumentNullException\";\r\nimport { ArgumentOutOfRangeException } from \"../exceptions/ArgumentOutOfRangeException\";\r\nimport { ArgumentException } from \"../exceptions/ArgumentException\";\r\n\r\nexport class List<T> implements IList<T>, IterableIterator<T> {\r\n    private count: number = 0;\r\n    private data: T[] = [];\r\n    private iteratorIndex: number = 0;\r\n    public constructor(data?: T[]){\r\n        if(data) {\r\n            this.data = [...data];\r\n            this.count = this.data.length;\r\n        }\r\n    }\r\n    public add(item: T) {\r\n        this.data.push(item);\r\n        this.count++;\r\n    }\r\n    public clear() {\r\n        this.data.length = 0;\r\n        this.count = 0;\r\n    }\r\n    public contains(item: T): boolean {\r\n        return  this.indexOf(item) > -1;\r\n    }\r\n    public copyTo(array: T[], arrayIndex: number): void {\r\n        if (!array) {\r\n            throw new ArgumentNullException(\"array is null.\");\r\n        }\r\n        if (arrayIndex < 0) {\r\n            throw new ArgumentOutOfRangeException(\"array index is less than 0.\");\r\n        }\r\n        let index = arrayIndex;\r\n        for(const item of this.data) {\r\n            array.splice(index, 0, item);\r\n            index++;\r\n        }\r\n    }\r\n    public exists(predicate: (item: T) => boolean): boolean {\r\n        if (!predicate) {\r\n            throw new ArgumentNullException(\"predicate is null.\");\r\n        }\r\n        return this.data.some(predicate);\r\n    }\r\n    public find(predicate: (item: T) => boolean): T {\r\n        const item = this.data.find(predicate);\r\n        return item || null;\r\n    }\r\n    public findAll(predicate: (item: T) => boolean): List<T> {\r\n        const foundData = this.data.filter(predicate);\r\n        return new List<T>(foundData);\r\n    }\r\n    public findIndex(predicate: (item: T) => boolean, startIndex?: number, count?: number): number {\r\n        if (!predicate) {\r\n            throw new ArgumentNullException(\"predicate is null.\");\r\n        }\r\n        if (startIndex < 0 || startIndex >= this.Count) {\r\n            throw new ArgumentOutOfRangeException(\"startIndex is not a valid index.\");\r\n        }\r\n        if (count < 0) {\r\n            throw new ArgumentOutOfRangeException(\"count is less than 0.\");\r\n        }\r\n        if (startIndex+count > this.Count) {\r\n            throw new ArgumentOutOfRangeException(\"startIndex and count do not specify a valid section in the list.\");\r\n        }\r\n        startIndex = startIndex || 0;\r\n        count      = count || this.Count;\r\n        let found  = false;\r\n        let foundIndex = -1;\r\n        for (let ix = startIndex; ix <= count; ++ix) {\r\n            found = predicate(this.data[ix]);\r\n            if (found) {\r\n                foundIndex = ix;\r\n                break;\r\n            }\r\n        }\r\n        return foundIndex;\r\n    }\r\n    public findLast(predicate: (item: T) => boolean): T {\r\n        if (!predicate) {\r\n            throw new ArgumentNullException(\"predicate is null.\");\r\n        }\r\n        let found = false;\r\n        let foundItem: T = null;\r\n        for (let ix = this.data.length - 1; ix >= 0; --ix) {\r\n            const elem = this.data[ix];\r\n            found = predicate(elem);\r\n            if (found) {\r\n                foundItem = elem;\r\n                break;\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n    public findLastIndex(predicate: (item: T) => boolean, startIndex?: number, count?: number): number {\r\n        if (!predicate) {\r\n            throw new ArgumentNullException(\"predicate is null.\");\r\n        }\r\n        if (startIndex < 0 || startIndex >= this.Count) {\r\n            throw new ArgumentOutOfRangeException(\"startIndex is not a valid index.\");\r\n        }\r\n        if (count < 0) {\r\n            throw new ArgumentOutOfRangeException(\"count is less than 0.\");\r\n        }\r\n        if (startIndex+count > this.Count) {\r\n            throw new ArgumentOutOfRangeException(\"startIndex and count do not specify a valid section in the list.\");\r\n        }\r\n        startIndex = startIndex || 0;\r\n        count      = count || this.Count;\r\n        let found  = false;\r\n        let foundIndex = -1;\r\n        for (let ix = startIndex+count; ix >= startIndex; --ix) {\r\n            found = predicate(this.data[ix]);\r\n            if (found) {\r\n                foundIndex = ix;\r\n                break;\r\n            }\r\n        }\r\n        return foundIndex;\r\n    }\r\n    public forEach(action: (item: T) => void): void {\r\n        this.data.forEach(d => action(d));\r\n    }\r\n    public get(index: number): T {\r\n        if (index < 0) {\r\n            throw new ArgumentOutOfRangeException(\"index is less than 0.\");\r\n        }\r\n        if (index > this.Count) {\r\n            throw new ArgumentOutOfRangeException(`index is greater than ${this.Count}.`);\r\n        }\r\n        return this.data[index];\r\n    }\r\n    public indexOf(item: T): number {\r\n        return this.data.findIndex(d => d === item);\r\n    }\r\n    public insert(index: number, item: T) {\r\n        if (index < 0) {\r\n            throw new ArgumentOutOfRangeException(\"index is less than 0.\");\r\n        }\r\n        if (index > this.Count) {\r\n            throw new ArgumentOutOfRangeException(`index is greater than ${this.Count}.`);\r\n        }\r\n        this.data.splice(index, 0, item);\r\n        this.count++;\r\n    }\r\n    public lastIndexOf(item: T): number {\r\n        return this.data.lastIndexOf(item);\r\n    }\r\n    public remove(item: T): boolean {\r\n        const index = this.data.findIndex(d => d === item);\r\n        if (index === -1) return false;\r\n        this.removeAt(index);\r\n        return true;\r\n    }\r\n    public removeAll(predicate: (value: T) => boolean): number {\r\n        const preCount = this.Count;\r\n        this.data = this.data.filter(d => !predicate(d));\r\n        this.count = this.data.length;\r\n        return preCount - this.count;\r\n    }\r\n    public removeAt(index: number): void {\r\n        if (index < 0) {\r\n            throw new ArgumentOutOfRangeException(\"index is less than 0.\");\r\n        }\r\n        if (index >= this.Count) {\r\n            throw new ArgumentOutOfRangeException(`index is equal to or greater than ${this.Count}.`);\r\n        }\r\n        this.data.splice(index, 1);\r\n        this.count--;\r\n    }\r\n    public removeRange(index: number, count: number): void {\r\n        if (index < 0) {\r\n            throw new ArgumentOutOfRangeException(\"index is less than 0.\");\r\n        }\r\n        if (count < 0) {\r\n            throw new ArgumentOutOfRangeException(\"count is less than 0.\");\r\n        }\r\n        if (index+count > this.data.length) {\r\n            throw new ArgumentException(\"index and count do not denote a valid range of elements in the list.\");\r\n        }\r\n        let removedCount = 0;\r\n        while(removedCount < count) {\r\n            this.removeAt(index);\r\n            removedCount++;\r\n        }\r\n    }\r\n    public reverse(): void {\r\n        this.data.reverse();\r\n    }\r\n    public set(index: number, item: T): void {\r\n        if (index < 0) {\r\n            throw new ArgumentOutOfRangeException(\"index is less than 0.\");\r\n        }\r\n        if (index > this.Count) {\r\n            throw new ArgumentOutOfRangeException(`index is greater than ${this.Count}.`);\r\n        }\r\n        this.data[index] = item;\r\n    }\r\n    public sort(): void {\r\n        const create = <T>(ctor: { new(): T }) => new ctor();\r\n        if (create(List) instanceof Number) {\r\n\r\n        }\r\n    }\r\n    public toArray(): T[] {\r\n        return [...this.data];\r\n    }\r\n\r\n    public next(): IteratorResult<T> {\r\n        if (this.iteratorIndex >= this.Count) {\r\n            this.iteratorIndex = 0;\r\n            return { done: true, value: null };\r\n        }\r\n        return { done: false, value: this.data[this.iteratorIndex++] };\r\n    }\r\n    [Symbol.iterator](): IterableIterator<T> {\r\n        return this;\r\n    }\r\n\r\n    public get Count() { return this.count; }\r\n}"],"names":["ArgumentNullException","constructor","message","this","Error","ArgumentOutOfRangeException","ArgumentException","List","data","count","length","add","item","push","clear","contains","indexOf","copyTo","array","arrayIndex","index","splice","exists","predicate","some","find","findAll","foundData","filter","findIndex","startIndex","Count","foundIndex","ix","findLast","foundItem","elem","findLastIndex","forEach","action","d","get","insert","lastIndexOf","remove","removeAt","removeAll","preCount","removeRange","removedCount","reverse","set","sort","Number","toArray","next","iteratorIndex","Symbol","iterator","prototypeAccessors"],"mappings":"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"}